diff --git a/GFDL_tools/read_climate_nudge_data.F90 b/GFDL_tools/read_climate_nudge_data.F90
index 407c712..8435125 100644
--- a/GFDL_tools/read_climate_nudge_data.F90
+++ b/GFDL_tools/read_climate_nudge_data.F90
@@ -184,8 +184,6 @@ integer, intent(out) :: nlon, nlat, nlev, ntime
          call get_variable_names(fileobj, fields)
          Files(n)%field_index = 0
          do i = 1, Files(n)%nvar
-            nd = get_variable_num_dimensions(fileobj, fields(i))
-            call get_variable_size(fileobj, fields(i), siz(1:nd))
             do j = 1, NUM_REQ_FLDS
                if (trim(fields(i)) .eq. trim(required_field_names(j))) then
                   Files(n)%field_index(j) = i
diff --git a/model/fv_mapz.F90 b/model/fv_mapz.F90
index e89b48d..b8631ad 100644
--- a/model/fv_mapz.F90
+++ b/model/fv_mapz.F90
@@ -33,7 +33,7 @@ module fv_mapz_mod
   use fv_arrays_mod,     only: fv_grid_type, fv_grid_bounds_type, R_GRID, inline_mp_type
   use fv_timing_mod,     only: timing_on, timing_off
   use fv_mp_mod,         only: is_master, mp_reduce_min, mp_reduce_max
-  use fv_cmp_mod,        only: qs_init, fv_sat_adj
+  use fast_sat_adj_mod,  only: fast_sat_adj, qsmith_init
 
   implicit none
   real, parameter:: consv_min = 0.001   ! below which no correction applies
@@ -63,14 +63,16 @@ contains
  subroutine Lagrangian_to_Eulerian(last_step, consv, ps, pe, delp, pkz, pk,   &
                                    mdt, pdt, npx, npy, km, is,ie,js,je, isd,ied,jsd,jed,       &
                       nq, nwat, sphum, q_con, u, v, w, delz, pt, q, hs, r_vir, cp,  &
-                      akap, cappa, kord_mt, kord_wz, kord_tr, kord_tm,  peln, te0_2d,        &
+                      akap, cappa, kord_mt, kord_wz, kord_tr, kord_tm, remap_te, peln, te0_2d,        &
                       ng, ua, va, omga, te, ws, fill, reproduce_sum, out_dt, dtdt,      &
                       ptop, ak, bk, pfull, gridstruct, domain, do_sat_adj, &
-                      hydrostatic, phys_hydrostatic, hybrid_z, do_omega, adiabatic, do_adiabatic_init, &
+                      hydrostatic, hybrid_z, adiabatic, do_adiabatic_init, &
                       do_inline_mp, inline_mp, c2l_ord, bd, fv_debug, &
-                      moist_phys)
+                      moist_phys, w_limiter, do_am4_remap)
   logical, intent(in):: last_step
   logical, intent(in):: fv_debug
+  logical, intent(in):: w_limiter
+  logical, intent(in):: do_am4_remap
   real,    intent(in):: mdt                   ! remap time step
   real,    intent(in):: pdt                   ! phys time step
   integer, intent(in):: npx, npy
@@ -99,7 +101,8 @@ contains
   logical, intent(in):: do_inline_mp
   logical, intent(in):: fill                  ! fill negative tracers
   logical, intent(in):: reproduce_sum
-  logical, intent(in):: do_omega, adiabatic, do_adiabatic_init
+  logical, intent(in):: adiabatic, do_adiabatic_init
+  logical, intent(in):: remap_te
   real, intent(in) :: ptop
   real, intent(in) :: ak(km+1)
   real, intent(in) :: bk(km+1)
@@ -123,10 +126,10 @@ contains
                                                      ! as input; output: temperature
   real, intent(inout), dimension(isd:,jsd:,1:)::q_con, cappa
   real, intent(inout), dimension(is:,js:,1:)::delz
-  logical, intent(in):: hydrostatic, phys_hydrostatic
+  logical, intent(in):: hydrostatic
   logical, intent(in):: hybrid_z
   logical, intent(in):: out_dt
-  logical, intent(in):: moist_phys
+  logical, intent(in):: moist_phys !not used --- lmh 13 may 21
 
   real, intent(inout)::   ua(isd:ied,jsd:jed,km)   ! u-wind (m/s) on physics grid
   real, intent(inout)::   va(isd:ied,jsd:jed,km)   ! v-wind (m/s) on physics grid
@@ -144,20 +147,22 @@ contains
 ! SJL 03.11.04: Initial version for partial remapping
 !
 !-----------------------------------------------------------------------
+  real, allocatable, dimension(:,:) :: dz, wa
   real, allocatable, dimension(:,:,:) :: dp0, u0, v0
   real, allocatable, dimension(:,:,:) :: u_dt, v_dt
   real, dimension(is:ie,js:je):: te_2d, zsum0, zsum1, dpln
-  real, dimension(is:ie,km)  :: q2, dp2, t0, w2
+  real, dimension(is:ie,km)  :: q2, dp2, t0, w2, q3
   real, dimension(is:ie,km+1):: pe1, pe2, pk1, pk2, pn2, phis
   real, dimension(isd:ied,jsd:jed,km):: pe4
   real, dimension(is:ie+1,km+1):: pe0, pe3
-  real, dimension(is:ie):: gsize, gz, cvm, qv
+  real, dimension(is:ie):: gsize, gz, cvm
+  real, dimension(isd:ied,jsd:jed,km):: qnl, qni
 
-  real rcp, rg, rrg, bkh, dtmp, k1k
+  real rcp, rg, rrg, bkh, dtmp, k1k, dlnp, tmp, tpe
   logical:: fast_mp_consv
   integer:: i,j,k
   integer:: nt, liq_wat, ice_wat, rainwat, snowwat, cld_amt, graupel, iq, n, kmp, kp, k_next
-  integer:: ccn_cm3
+  integer:: ccn_cm3, cin_cm3
 
        k1k = rdgas/cv_air   ! akap / (1.-akap) = rg/Cv=0.4
         rg = rdgas
@@ -171,6 +176,7 @@ contains
        graupel = get_tracer_index (MODEL_ATMOS, 'graupel')
        cld_amt = get_tracer_index (MODEL_ATMOS, 'cld_amt')
        ccn_cm3 = get_tracer_index (MODEL_ATMOS, 'ccn_cm3')
+       cin_cm3 = get_tracer_index (MODEL_ATMOS, 'cin_cm3')
 
        if ( do_adiabatic_init .or. do_sat_adj ) then
             fast_mp_consv = (.not.do_adiabatic_init) .and. consv>consv_min
@@ -178,18 +184,20 @@ contains
                kmp = k
                if ( pfull(k) > 10.E2 ) exit
             enddo
-            call qs_init(kmp)
+            call qsmith_init
        endif
 
 !$OMP parallel do default(none) shared(is,ie,js,je,km,pe,ptop,kord_tm,hydrostatic, &
 !$OMP                                  pt,pk,rg,peln,q,nwat,liq_wat,rainwat,ice_wat,snowwat,    &
-!$OMP                                  graupel,q_con,sphum,cappa,r_vir,rcp,k1k,delp, &
+!$OMP                                  graupel,q_con,sphum,cappa,r_vir,k1k,delp, &
 !$OMP                                  delz,akap,pkz,te,u,v,ps, gridstruct, last_step, &
 !$OMP                                  ak,bk,nq,isd,ied,jsd,jed,kord_tr,fill, adiabatic, &
-!$OMP                                  hs,w,ws,kord_wz,do_omega,omga,rrg,kord_mt,pe4)    &
-!$OMP                          private(qv,gz,cvm,kp,k_next,bkh,dp2,   &
+!$OMP                                  hs,w,ws,kord_wz,omga,rrg,kord_mt,pe4,w_limiter,cp,remap_te,do_am4_remap)    &
+!$OMP                          private(qv,gz,cvm,kp,k_next,bkh,dp2,dlnp,tpe,   &
 !$OMP                                  pe0,pe1,pe2,pe3,pk1,pk2,pn2,phis,q2,w2)
-  do 1000 j=js,je+1
+  do j=js,je+1
+
+    !0) Prepare pressure (pe, pk, ps, delp), temperature, density, and energy
 
      do k=1,km+1
         do i=is,ie
@@ -203,9 +211,11 @@ contains
      enddo
 
   if ( j /= (je+1) ) then
-       if ( kord_tm < 0 ) then
-! Note: pt at this stage is Theta_v
-             if ( hydrostatic ) then
+
+     if (  .not. remap_te ) then
+        if ( kord_tm < 0 ) then
+           ! Note: pt at this stage is Theta_v
+           if ( hydrostatic ) then
 ! Transform virtual pt to virtual Temp
              do k=1,km
                    do i=is,ie
@@ -3009,11 +3019,12 @@ endif        ! end last_step check
 
 
 
- subroutine mappm(km, pe1, q1, kn, pe2, q2, i1, i2, iv, kord, ptop)
+ subroutine mappm(km, pe1, q1, kn, pe2, q2, i1, i2, iv, kord)
 
 ! IV = 0: constituents
 ! IV = 1: potential temp
 ! IV =-1: winds
+! IV =-2: vertical velocity
 
 ! Mass flux preserving mapping: q1(im,km) -> q2(im,kn)
 
@@ -3024,9 +3035,8 @@ endif        ! end last_step check
 
  integer, intent(in):: i1, i2, km, kn, kord, iv
  real, intent(in ):: pe1(i1:i2,km+1), pe2(i1:i2,kn+1)
- real, intent(in )::  q1(i1:i2,km)
- real, intent(out)::  q2(i1:i2,kn)
- real, intent(IN) :: ptop
+ real, intent(in )::  q1(i1:i2,km) ! input field
+ real, intent(out)::  q2(i1:i2,kn) ! output field
 ! local
       real  qs(i1:i2)
       real dp1(i1:i2,km)
@@ -3048,17 +3058,6 @@ endif        ! end last_step check
            call ppm_profile( a4, dp1, km, i1, i2, iv, kord )
       endif
 
-!------------------------------------
-! Lowest layer: constant distribution
-!------------------------------------
-#ifdef NGGPS_SUBMITTED
-      do i=i1,i2
-         a4(2,i,km) = q1(i,km)
-         a4(3,i,km) = q1(i,km)
-         a4(4,i,km) = 0.
-      enddo
-#endif
-
       do 5555 i=i1,i2
          k0 = 1
       do 555 k=1,kn
@@ -3068,11 +3067,7 @@ endif        ! end last_step check
             q2(i,k) = q1(i,1)
          elseif(pe2(i,k) .ge. pe1(i,km+1)) then
 ! Entire grid below old ps
-#ifdef NGGPS_SUBMITTED
-            q2(i,k) = a4(3,i,km)   ! this is not good.
-#else
             q2(i,k) = q1(i,km)
-#endif
          else
 
          do 45 L=k0,km
@@ -3123,11 +3118,7 @@ endif        ! end last_step check
         delp = pe2(i,k+1) - pe1(i,km+1)
         if(delp > 0.) then
 ! Extended below old ps
-#ifdef NGGPS_SUBMITTED
-           qsum = qsum + delp * a4(3,i,km)    ! not good.
-#else
            qsum = qsum + delp * q1(i,km)
-#endif
           dpsum = dpsum + delp
         endif
 123     q2(i,k) = qsum / dpsum
